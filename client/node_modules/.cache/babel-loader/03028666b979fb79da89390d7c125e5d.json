{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\Dev\\\\Project\\\\MessengerClone\\\\chat-app\\\\client\\\\src\\\\components\\\\room\\\\Conversation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport { Divider, Button, Form, Input } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport Message from \"../room/Message\";\nimport Status from \"../room/Status\";\nimport \"../../css/Conversation.css\";\nlet socket;\n\nconst Conversation = ({\n  userId,\n  location\n}) => {\n  _s();\n\n  const formItemLayout = {\n    labelCol: {\n      span: 24\n    },\n    wrapperCol: {\n      span: 24\n    }\n  };\n  const buttonItemLayout = {\n    labelCol: {\n      span: 24\n    },\n    wrapperCol: {\n      span: 24\n    }\n  };\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const ENDPOINT = \"localhost:5000\";\n\n  const sendMessage = event => {\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\")); //setMessages([...messages, { userId: userId, text: message }]);\n    }\n  };\n\n  console.log(message, messages);\n  useEffect(() => {\n    socket = io.connect(ENDPOINT);\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    setName(name);\n    setRoom(room);\n    socket.emit(\"login\", {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conversation-pane\",\n    children: [/*#__PURE__*/_jsxDEV(Divider, {\n      className: \"status\",\n      children: /*#__PURE__*/_jsxDEV(Status, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      id: \"message-input\",\n      onFinish: sendMessage,\n      layout: \"inline\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        rules: [{\n          required: true\n        }],\n        ...formItemLayout,\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          placeholder: \"Enter a message...\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          onPressEnter: e => sendMessage(e),\n          style: {\n            height: \"20px\",\n            width: \"100%\",\n            resize: \"none\",\n            radius: \"20px\",\n            display: \"inline\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"sendButton\",\n        ...buttonItemLayout,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"sendButton\",\n          type: \"primary\",\n          disabled: !message,\n          htmlType: \"submit\",\n          style: {\n            size: \"middle\",\n            shape: \"circle\",\n            backgroundColor: \"00BFFF\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Conversation, \"9fD7Lnsg8tiVWhs3+X7UotE5qu8=\");\n\n_c = Conversation;\nexport default Conversation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"sources":["E:/Dev/Project/MessengerClone/chat-app/client/src/components/room/Conversation.js"],"names":["React","useState","useEffect","shortid","queryString","io","Divider","Button","Form","Input","SendOutlined","Message","Status","socket","Conversation","userId","location","formItemLayout","labelCol","span","wrapperCol","buttonItemLayout","message","setMessage","messages","setMessages","name","setName","room","setRoom","ENDPOINT","sendMessage","event","emit","console","log","connect","parse","search","off","on","required","e","target","value","height","width","resize","radius","display","size","shape","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport queryString from \"query-string\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport { Divider, Button, Form, Input } from \"antd\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\n\r\nimport Message from \"../room/Message\";\r\nimport Status from \"../room/Status\";\r\nimport \"../../css/Conversation.css\";\r\n\r\nlet socket;\r\n\r\nconst Conversation = ({ userId, location }) => {\r\n  const formItemLayout = {\r\n    labelCol: { span: 24 },\r\n    wrapperCol: { span: 24 },\r\n  };\r\n\r\n  const buttonItemLayout = {\r\n    labelCol: { span: 24 },\r\n    wrapperCol: { span: 24 },\r\n  };\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const ENDPOINT = \"localhost:5000\";\r\n\r\n  const sendMessage = (event) => {\r\n    if (message) {\r\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\r\n      //setMessages([...messages, { userId: userId, text: message }]);\r\n    }\r\n  };\r\n\r\n  console.log(message, messages);\r\n\r\n  useEffect(() => {\r\n    socket = io.connect(ENDPOINT);\r\n    const { name, room } = queryString.parse(location.search);\r\n\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    socket.emit(\"login\", { name, room }, () => {});\r\n\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n\r\n      socket.off();\r\n    };\r\n  }, [ENDPOINT, location.search]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      setMessages([...messages, message]);\r\n    });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"conversation-pane\">\r\n      <Divider className=\"status\">\r\n        <Status room={room} />\r\n      </Divider>\r\n      {/* <div className=\"messages-container\">\r\n        {messages.map((message, key) => (\r\n          <Message key={shortid.generate()} message={message} userId={userId} />\r\n        ))}\r\n      </div> */}\r\n\r\n      <Form id=\"message-input\" onFinish={sendMessage} layout=\"inline\">\r\n        <Form.Item rules={[{ required: true }]} {...formItemLayout}>\r\n          <Input.TextArea\r\n            placeholder=\"Enter a message...\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            onPressEnter={(e) => sendMessage(e)}\r\n            style={{\r\n              height: \"20px\",\r\n              width: \"100%\",\r\n              resize: \"none\",\r\n              radius: \"20px\",\r\n              display: \"inline\",\r\n            }}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item name=\"sendButton\" {...buttonItemLayout}>\r\n          <Button\r\n            className=\"sendButton\"\r\n            type=\"primary\"\r\n            disabled={!message}\r\n            htmlType=\"submit\"\r\n            style={{\r\n              size: \"middle\",\r\n              shape: \"circle\",\r\n              backgroundColor: \"00BFFF\",\r\n            }}\r\n            icon={<SendOutlined />}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conversation;\r\n"]},"metadata":{},"sourceType":"module"}